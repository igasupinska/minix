diff -rupN minix_clean/usr/src/minix/kernel/proc.c minix_working/usr/src/minix/kernel/proc.c
--- minix_clean/usr/src/minix/kernel/proc.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_working/usr/src/minix/kernel/proc.c	2019-05-27 23:28:43.000000000 +0200
@@ -117,7 +117,7 @@ static void set_idle_name(char * name, i
 	}
 
 void proc_init(void)
-{
+{	/* eas_2019 */
 	struct proc * rp;
 	struct priv *sp;
 	int i;
@@ -134,6 +134,7 @@ void proc_init(void)
 		rp->p_scheduler = NULL;		/* no user space scheduler */
 		rp->p_priority = 0;		/* no priority */
 		rp->p_quantum_size_ms = 0;	/* no quantum size */
+		rp->times_picked = 0;
 
 		/* arch-specific initialization */
 		arch_proc_reset(rp);
@@ -1711,8 +1712,11 @@ void dequeue(struct proc *rp)
 /*===========================================================================*
  *				pick_proc				     * 
  *===========================================================================*/
+int zero_times_picked_in_queue(struct proc* p);
+int check_if_sched_proc_unserved(struct proc* p);
+
 static struct proc * pick_proc(void)
-{
+{	/* eas_2019 */
 /* Decide who to run now.  A new process is selected an returned.
  * When a billable process is selected, record it in 'bill_ptr', so that the 
  * clock task can tell who to bill for system time.
@@ -1727,16 +1731,63 @@ static struct proc * pick_proc(void)
    * queues is defined in proc.h, and priorities are set in the task table.
    * If there are no processes ready to run, return NULL.
    */
+  int proc_picked = 0;
   rdy_head = get_cpulocal_var(run_q_head);
-  for (q=0; q < NR_SCHED_QUEUES; q++) {	
+  for (q=0; q < NR_SCHED_QUEUES; q++) {
 	if(!(rp = rdy_head[q])) {
+		if (q == 9) {
+			int count = zero_times_picked_in_queue(rdy_head[7])
+						+ zero_times_picked_in_queue(rdy_head[8]);	
+			if (count > 0) {
+				q = 6;
+			}		
+		}
 		TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, q););
 		continue;
 	}
-	assert(proc_is_runnable(rp));
-	if (priv(rp)->s_flags & BILLABLE)	 	
-		get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
-	return rp;
+
+	if (q < 7 || q > 9 || !rp->p_scheduler) {
+		assert(proc_is_runnable(rp));
+		if (priv(rp)->s_flags & BILLABLE)	 	
+			get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
+		return rp;
+	}
+
+	if (q == 7) {
+		//check if head of queue I hasn't already been picked in this round
+		if (rp->times_picked == 0) {
+			proc_picked = 1;
+			rp->times_picked = 1;
+		}		
+	} else if (q == 8) {
+		if (rp->times_picked == 0) {
+			//check if queue I should be zeroed
+			if (check_if_sched_proc_unserved(rp) == 1) {
+				zero_times_picked_in_queue(rdy_head[7]);
+			}
+			rp->times_picked = 1;
+			proc_picked = 1;
+		}	
+	} else if (q == 9) {
+		//in queue III we don't care about times_picked
+		//zero queue I	
+	  	zero_times_picked_in_queue(rdy_head[7]);
+		//zero queue II
+		zero_times_picked_in_queue(rdy_head[8]);
+		proc_picked = 1;
+	} else {
+		/* not reachable */
+		assert(0);
+	}
+
+	if (proc_picked == 1) {
+		assert(proc_is_runnable(rp));
+		if (priv(rp)->s_flags & BILLABLE)	 	
+			get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
+		return rp;
+	}
+	proc_picked = 0;
+
   }
   return NULL;
 }
@@ -1916,3 +1967,26 @@ void increase_proc_signals(struct proc *
 {
 	p->p_signal_received++;
 }
+
+
+int zero_times_picked_in_queue(struct proc* p) { /* eas_2019 */
+	if (p == NULL)
+		return 0;
+	if (p->p_scheduler) {
+		p->times_picked = 0;
+		return zero_times_picked_in_queue(p->p_nextready) + 1;
+	} else {
+		return zero_times_picked_in_queue(p->p_nextready);
+	}
+}
+
+int check_if_sched_proc_unserved(struct proc* p) { /* eas_2019 */
+	if (p->p_nextready == NULL)
+		return 0;
+
+	struct proc* nextp = p->p_nextready;
+	if (nextp->times_picked == 0 && nextp->p_scheduler)
+		return 1;
+
+	return check_if_sched_proc_unserved(nextp);
+}
\ Brak znaku nowej linii na ko≈Ñcu pliku
diff -rupN minix_clean/usr/src/minix/kernel/proc.h minix_working/usr/src/minix/kernel/proc.h
--- minix_clean/usr/src/minix/kernel/proc.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_working/usr/src/minix/kernel/proc.h	2019-05-27 23:28:43.000000000 +0200
@@ -19,7 +19,7 @@
 #include "const.h"
 #include "priv.h"
 
-struct proc {
+struct proc {	/* eas_2019 */
   struct stackframe_s p_reg;	/* process' registers saved in stack frame */
   struct segframe p_seg;	/* segment descriptors */
   proc_nr_t p_nr;		/* number of this process (for fast access) */
@@ -32,7 +32,7 @@ struct proc {
   unsigned p_quantum_size_ms;	/* assigned time quantum in ms
 				   FIXME remove this */
   struct proc *p_scheduler;	/* who should get out of quantum msg */
-  unsigned p_cpu;		/* what CPU is the process running on */
+  unsigned p_cpu;		/* what CPU is the process running on */ 
 #ifdef CONFIG_SMP
   bitchunk_t p_cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 							    process allowed to
@@ -131,6 +131,8 @@ struct proc {
 #if DEBUG_TRACE
   int p_schedules;
 #endif
+
+  uint8_t times_picked;
 };
 
 #endif /* __ASSEMBLY__ */
diff -rupN minix_clean/usr/src/minix/kernel/procoffsets.h minix_working/usr/src/minix/kernel/procoffsets.h
--- minix_clean/usr/src/minix/kernel/procoffsets.h	2016-11-18 21:46:22.000000000 +0100
+++ minix_working/usr/src/minix/kernel/procoffsets.h	2019-05-27 23:28:43.000000000 +0200
@@ -1,4 +1,4 @@
-#define proc_SIZEOF 528
+#define proc_SIZEOF 529 /* eas_2019 */
 #define DIREG 8
 #define SIREG 12
 #define BPREG 16
diff -rupN minix_clean/usr/src/minix/kernel/system.c minix_working/usr/src/minix/kernel/system.c
--- minix_clean/usr/src/minix/kernel/system.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_working/usr/src/minix/kernel/system.c	2019-05-27 23:28:43.000000000 +0200
@@ -622,7 +622,7 @@ int sched_proc(struct proc *p,
 			int priority,
 			int quantum,
 			int cpu)
-{
+{ /* eas_2019 */
 	/* Make sure the values given are within the allowed range.*/
 	if ((priority < TASK_Q && priority != -1) || priority > NR_SCHED_QUEUES)
 		return(EINVAL);
@@ -659,8 +659,16 @@ int sched_proc(struct proc *p,
 	if (proc_is_runnable(p))
 		RTS_SET(p, RTS_NO_QUANTUM);
 
-	if (priority != -1)
-		p->p_priority = priority;
+	if (priority != -1) {
+		/* If process not scheduled by kernel and moved to a different
+     * priority queue, mark it was not picked in this round. */
+    if (p->p_scheduler) {
+      if (p->p_priority != priority) {
+        p->times_picked = 0;
+      }
+    }
+    p->p_priority = priority;
+  }
 	if (quantum != -1) {
 		p->p_quantum_size_ms = quantum;
 		p->p_cpu_time_left = ms_2_cpu_time(quantum);
diff -rupN minix_clean/usr/src/minix/servers/sched/schedproc.h minix_working/usr/src/minix/servers/sched/schedproc.h
--- minix_clean/usr/src/minix/servers/sched/schedproc.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_working/usr/src/minix/servers/sched/schedproc.h	2019-05-27 23:28:35.000000000 +0200
@@ -33,6 +33,7 @@ EXTERN struct schedproc {
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
 								to run on */
+	unsigned slices_used;	/* eas_2019 */
 } schedproc[NR_PROCS];
 
 /* Flag values */
diff -rupN minix_clean/usr/src/minix/servers/sched/schedule.c minix_working/usr/src/minix/servers/sched/schedule.c
--- minix_clean/usr/src/minix/servers/sched/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_working/usr/src/minix/servers/sched/schedule.c	2019-05-27 23:28:35.000000000 +0200
@@ -88,7 +88,7 @@ static void pick_cpu(struct schedproc *
  *===========================================================================*/
 
 int do_noquantum(message *m_ptr)
-{
+{	/* eas_2019 */
 	register struct schedproc *rmp;
 	int rv, proc_nr_n;
 
@@ -99,8 +99,30 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
-		rmp->priority += 1; /* lower priority */
+
+	rmp->slices_used += 1;
+	switch(rmp->priority) {
+		case USER_Q:
+			if (rmp->slices_used == 5) {
+				rmp->slices_used = 0;
+				rmp->priority = USER_Q + 1;
+			}
+			break;
+		case USER_Q + 1:
+			if (rmp->slices_used == 10) {
+				rmp->slices_used = 0;
+				rmp->priority = USER_Q + 2;
+			}
+			break;
+		case USER_Q + 2:
+			if (rmp->slices_used == 20) {
+				rmp->slices_used = 0;
+				rmp->priority = USER_Q;
+			}
+			break;
+		default:
+			/* not reachable */
+			assert(0);	
 	}
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
@@ -141,7 +163,7 @@ int do_stop_scheduling(message *m_ptr)
  *				do_start_scheduling			     *
  *===========================================================================*/
 int do_start_scheduling(message *m_ptr)
-{
+{	/* eas_2019 */
 	register struct schedproc *rmp;
 	int rv, proc_nr_n, parent_nr_n;
 	
@@ -163,7 +185,8 @@ int do_start_scheduling(message *m_ptr)
 	/* Populate process slot */
 	rmp->endpoint     = m_ptr->m_lsys_sched_scheduling_start.endpoint;
 	rmp->parent       = m_ptr->m_lsys_sched_scheduling_start.parent;
-	rmp->max_priority = m_ptr->m_lsys_sched_scheduling_start.maxprio;
+	rmp->max_priority = USER_Q;
+	rmp->slices_used = 0;
 	if (rmp->max_priority >= NR_SCHED_QUEUES) {
 		return EINVAL;
 	}
@@ -195,7 +218,7 @@ int do_start_scheduling(message *m_ptr)
 		/* We have a special case here for system processes, for which
 		 * quanum and priority are set explicitly rather than inherited 
 		 * from the parent */
-		rmp->priority   = rmp->max_priority;
+		rmp->priority   = USER_Q;
 		rmp->time_slice = m_ptr->m_lsys_sched_scheduling_start.quantum;
 		break;
 		
@@ -207,7 +230,7 @@ int do_start_scheduling(message *m_ptr)
 				&parent_nr_n)) != OK)
 			return rv;
 
-		rmp->priority = schedproc[parent_nr_n].priority;
+		rmp->priority = USER_Q;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
 		break;
 		
@@ -334,10 +357,10 @@ static int schedule_process(struct sched
  *===========================================================================*/
 
 void init_scheduling(void)
-{
+{	/* eas_2019 */
 	balance_timeout = BALANCE_TIMEOUT * sys_hz();
 	init_timer(&sched_timer);
-	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
+	//set_timer(&sched_timer, balance_timeout, balance_queues, 0);
 }
 
 /*===========================================================================*
