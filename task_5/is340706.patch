diff -rupN minix_czysty/usr/src/minix/fs/mfs/inode.c minix_moj/usr/src/minix/fs/mfs/inode.c
--- minix_czysty/usr/src/minix/fs/mfs/inode.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_moj/usr/src/minix/fs/mfs/inode.c	2019-06-10 01:29:08.000000000 +0200
@@ -296,7 +296,7 @@ struct inode *alloc_inode(dev_t dev, mod
 	rip->i_ndzones = sp->s_ndzones;	/* number of direct zones */
 	rip->i_nindirs = sp->s_nindirs;	/* number of indirect zones per blk*/
 	rip->i_sp = sp;			/* pointer to super block */
-
+  rip->i_deletes = 0;
 	/* Fields not cleared already are cleared in wipe_inode().  They have
 	 * been put there because truncate() needs to clear the same fields if
 	 * the file happens to be open while being truncated.  It saves space
diff -rupN minix_czysty/usr/src/minix/fs/mfs/inode.h minix_moj/usr/src/minix/fs/mfs/inode.h
--- minix_czysty/usr/src/minix/fs/mfs/inode.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_moj/usr/src/minix/fs/mfs/inode.h	2019-06-10 01:29:08.000000000 +0200
@@ -46,7 +46,7 @@ EXTERN struct inode {
 
   LIST_ENTRY(inode) i_hash;     /* hash list */
   TAILQ_ENTRY(inode) i_unused;  /* free and unused list */
-  
+  int i_deletes;
 } inode[NR_INODES];
 
 /* list of unused/free inodes */ 
diff -rupN minix_czysty/usr/src/minix/fs/mfs/link.c minix_moj/usr/src/minix/fs/mfs/link.c
--- minix_czysty/usr/src/minix/fs/mfs/link.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_moj/usr/src/minix/fs/mfs/link.c	2019-06-10 01:29:08.000000000 +0200
@@ -7,9 +7,14 @@
 #include "super.h"
 #include <minix/vfsif.h>
 #include <sys/param.h>
+#include <assert.h>
 
 #define SAME 1000
 
+static char *A_MODE = "A.mode"; // stawiaja null byte na koncu
+static char *B_MODE = "B.mode";
+static char *C_MODE = "C.mode";
+static char *BAK = ".bak";
 
 static int freesp_inode(struct inode *rip, off_t st, off_t end);
 static int remove_dir(struct inode *rldirp, struct inode *rip, char
@@ -21,6 +26,14 @@ static void zerozone_half(struct inode *
 	zone_size);
 static void zerozone_range(struct inode *rip, off_t pos, off_t len);
 
+static int find_mode_file(struct inode *dir, char *mode_file_type);
+static int not_mode_file(char *string);
+static int perform_special_unlink(char *mode_file_type, struct inode *dirp,
+  struct inode *rip, char file_name[MFS_NAME_MAX]);
+static int do_mode_C_unlink(struct inode *dirp, struct inode *rip,
+  char file_name[MFS_NAME_MAX]);
+
+
 /* Args to zerozone_half() */
 #define FIRST_HALF	0
 #define LAST_HALF	1
@@ -120,6 +133,8 @@ int fs_unlink()
   int r;
   char string[MFS_NAME_MAX];
   phys_bytes len;
+  char file_mode_type[strlen(A_MODE) + 1];
+
   
   /* Copy the last component */
   len = min(fs_m_in.m_vfs_fs_unlink.path_len, sizeof(string));
@@ -156,7 +171,16 @@ int fs_unlink()
 	  if( (rip->i_mode & I_TYPE) == I_DIRECTORY) r = EPERM;
 
 	  /* Actually try to unlink the file; fails if parent is mode 0 etc. */
-	  if (r == OK) r = unlink_file(rldirp, rip, string);
+	  if (r == OK) {
+      /* Check conditions for special unlink. */
+      if (find_mode_file(rldirp, file_mode_type) == OK
+        && (rip->i_mode & I_TYPE) == I_REGULAR
+        && not_mode_file(string) == OK) {
+        r = perform_special_unlink(file_mode_type, rldirp, rip, string);
+      } else {
+        r = unlink_file(rldirp, rip, string);
+      }
+    }
   } else {
 	  r = remove_dir(rldirp, rip, string); /* call is RMDIR */
   }
@@ -448,11 +472,15 @@ int fs_rename()
 	numb = old_ip->i_num;		/* inode number of old file */
 	  
 	if(same_pdir) {
+    int deletes = old_dirp->i_deletes;
 		r = search_dir(old_dirp, old_name, NULL, DELETE, IGN_PERM);
 						/* shouldn't go wrong. */
-		if(r == OK)
+		if(r == OK) {
 			(void) search_dir(old_dirp, new_name, &numb, ENTER,
 					  IGN_PERM);
+      old_dirp->i_deletes = deletes;
+    }
+
 	} else {
 		r = search_dir(new_dirp, new_name, &numb, ENTER, IGN_PERM);
 		if(r == OK)
@@ -701,3 +729,138 @@ off_t len;
   }
 }
 
+
+/*===========================================================================*
+ *        find_mode_file             *
+ *===========================================================================*/
+static int find_mode_file(dir, mode_file_type)
+struct inode *dir;
+char *mode_file_type;
+{
+  struct inode *mode_file;
+
+  /* Mode A */
+  mode_file = advance(dir, A_MODE, IGN_PERM);
+  if ((mode_file != NULL) && (mode_file->i_mode & I_TYPE) == I_REGULAR) {
+    strcpy(mode_file_type, A_MODE);
+    put_inode(mode_file);
+    return OK;
+  }
+  /* Mode B*/
+  mode_file = advance(dir, B_MODE, IGN_PERM);
+  if (mode_file != NULL && (mode_file->i_mode & I_TYPE) == I_REGULAR) {
+    strcpy(mode_file_type, B_MODE);
+    put_inode(mode_file);
+    return OK;
+  }
+  /* Mode C */
+  mode_file = advance(dir, C_MODE, IGN_PERM);
+  if (mode_file != NULL && (mode_file->i_mode & I_TYPE) == I_REGULAR) {
+    strcpy(mode_file_type, C_MODE);
+    put_inode(mode_file);
+    return OK;
+  }
+
+  put_inode(mode_file);
+  return -1;
+}
+
+
+/*===========================================================================*
+ *        not_mode_file             *
+ *===========================================================================*/
+static int not_mode_file(string)
+char *string;
+{
+  if (strcmp(string, A_MODE) == 0 ||
+      strcmp(string, B_MODE) == 0 ||
+      strcmp(string, C_MODE) == 0) {
+    return -1;
+  }
+
+  return OK;
+}
+
+
+/*===========================================================================*
+ *        perform_special_unlink             *
+ *===========================================================================*/
+static int perform_special_unlink(mode_file_type, dirp, rip, file_name)
+char *mode_file_type;
+struct inode *dirp;
+struct inode *rip;
+char file_name[MFS_NAME_MAX];
+{
+
+  int r;
+
+  if (strcmp(mode_file_type, A_MODE) == 0) {
+    r = EPERM;
+  
+  } else if (strcmp(mode_file_type, B_MODE) == 0) {
+    if (rip->i_deletes == 0) {
+      rip->i_deletes = 1;
+      r = EINPROGRESS;
+    } else {
+      rip->i_deletes = 0;
+      r = unlink_file(dirp, rip, file_name);
+    }
+  
+  } else {
+    assert(strcmp(mode_file_type, C_MODE) == 0);
+    r = do_mode_C_unlink(dirp, rip, file_name);
+  }
+  return r;
+}
+
+
+/*===========================================================================*
+ *        do_mode_C_unlink             *
+ *===========================================================================*/
+static int do_mode_C_unlink(dirp, rip, file_name)
+struct inode *dirp;
+struct inode *rip;
+char file_name[MFS_NAME_MAX];
+{
+  int r;
+  int len = strlen(file_name);
+
+  if (file_name[len - 4] == '.'
+    && file_name[len - 3] == 'b'
+    && file_name[len - 2] == 'a'
+    && file_name[len - 1] == 'k') {
+    r = unlink_file(dirp, rip, file_name);
+  } else {
+    struct inode *old_ip, *dup_ip;
+    ino_t numb;
+    old_ip = advance(dirp, file_name, IGN_PERM);
+    numb = old_ip->i_num;
+
+    if (len + strlen(BAK) < MFS_NAME_MAX) {
+      char backup_file_name[MFS_NAME_MAX];
+      strcpy(backup_file_name, file_name);
+      strcat(backup_file_name, BAK);
+
+      dup_ip = advance(dirp, backup_file_name, IGN_PERM);
+      if (dup_ip != NULL) {
+        if ((dup_ip->i_mode & I_TYPE) == I_DIRECTORY) {
+          r = EISDIR;
+        } else {
+          r = EEXIST;
+        }
+        put_inode(dup_ip);
+      } else {
+        r = search_dir(dirp, file_name, NULL, DELETE, IGN_PERM);
+        if (r == OK) {
+          (void) search_dir(dirp, backup_file_name, &numb, ENTER, IGN_PERM);
+        }
+      }
+    } else {
+      r = ENAMETOOLONG;
+    }
+
+    put_inode(old_ip);
+
+  }
+  return r;
+}
\ Brak znaku nowej linii na ko≈Ñcu pliku
